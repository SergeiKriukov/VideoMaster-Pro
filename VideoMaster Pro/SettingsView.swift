//
//  SettingsView.swift
//  VideoMaster Pro
//
//  Created by Sergey on 22.09.2025.
//

import SwiftUI

struct SettingsView: View {
    @ObservedObject var viewModel: VideoConverterViewModel
    @State private var isShowingOutputFolderPicker = false

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 32) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Text("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding(.horizontal)

                // –í–∏–¥–µ–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                VideoSettingsSection(viewModel: viewModel)

                Divider()

                // –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                AudioSettingsSection(viewModel: viewModel)

                Divider()

                // –í—ã—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                OutputSettingsSection(viewModel: viewModel, isShowingFolderPicker: $isShowingOutputFolderPicker)

                Divider()

                // –ü—Ä–µ—Å–µ—Ç—ã
                PresetsSection(viewModel: viewModel)

                Divider()

                // –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                SystemSettingsSection()
            }
            .padding()
        }
        .fileImporter(
            isPresented: $isShowingOutputFolderPicker,
            allowedContentTypes: [.folder]
        ) { result in
            switch result {
            case .success(let urls):
                viewModel.conversionSettings.outputDirectory = urls
            case .failure(let error):
                print("Error selecting output folder: \(error)")
            }
        }
    }
}

struct VideoSettingsSection: View {
    @ObservedObject var viewModel: VideoConverterViewModel

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("üé¨ –í–∏–¥–µ–æ")
                .font(.headline)

            VStack(spacing: 12) {
                // –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ
                SettingRow(label: "–ö–æ–¥–µ–∫") {
                    Picker("", selection: $viewModel.conversionSettings.videoCodec) {
                        ForEach(VideoCodec.allCases, id: \.self) { codec in
                            Text(codec.rawValue).tag(codec)
                        }
                    }
                    .pickerStyle(.segmented)
                    .frame(width: 300)
                }

                // –ö–∞—á–µ—Å—Ç–≤–æ
                if viewModel.conversionSettings.videoCodec != .copy {
                    SettingRow(label: "–ö–∞—á–µ—Å—Ç–≤–æ (CRF)") {
                        VStack(alignment: .leading, spacing: 4) {
                            Slider(value: $viewModel.conversionSettings.videoQuality, in: 0...51, step: 1)
                                .frame(width: 300)

                            HStack {
                                Text("0 (–ª—É—á—à–µ–µ)")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Spacer()
                                Text("\(Int(viewModel.conversionSettings.videoQuality))")
                                    .font(.callout)
                                    .fontWeight(.medium)
                                Spacer()
                                Text("51 (—Ö—É–¥—à–µ–µ)")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }

                    Text("CRF (Constant Rate Factor) - —á–µ–º –º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .padding(.leading, 120)
                }

                // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                SettingRow(label: "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ") {
                    Picker("", selection: $viewModel.conversionSettings.resolution) {
                        Text("–û—Ä–∏–≥–∏–Ω–∞–ª").tag("–û—Ä–∏–≥–∏–Ω–∞–ª")
                        Text("4K (3840x2160)").tag("3840x2160")
                        Text("Full HD (1920x1080)").tag("1920x1080")
                        Text("HD (1280x720)").tag("1280x720")
                        Text("SD (854x480)").tag("854x480")
                        Text("–ö–∞—Å—Ç–æ–º–Ω–æ–µ").tag("–ö–∞—Å—Ç–æ–º–Ω–æ–µ")
                    }
                    .frame(width: 200)
                }

                // –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                if viewModel.conversionSettings.resolution == "–ö–∞—Å—Ç–æ–º–Ω–æ–µ" {
                    HStack(spacing: 12) {
                        Spacer()
                            .frame(width: 120)

                        HStack(spacing: 8) {
                            TextField("–®–∏—Ä–∏–Ω–∞", value: $viewModel.conversionSettings.customWidth, format: .number)
                                .textFieldStyle(.roundedBorder)
                                .frame(width: 80)

                            Text("√ó")

                            TextField("–í—ã—Å–æ—Ç–∞", value: $viewModel.conversionSettings.customHeight, format: .number)
                                .textFieldStyle(.roundedBorder)
                                .frame(width: 80)

                            Text("px")
                        }
                    }
                }

                // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
                SettingRow(label: "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ") {
                    Picker("", selection: $viewModel.conversionSettings.aspectRatio) {
                        Text("–ê–≤—Ç–æ").tag("–ê–≤—Ç–æ")
                        Text("16:9").tag("16:9")
                        Text("4:3").tag("4:3")
                        Text("1:1").tag("1:1")
                        Text("21:9").tag("21:9")
                    }
                    .frame(width: 150)
                }
            }
        }
    }
}

struct AudioSettingsSection: View {
    @ObservedObject var viewModel: VideoConverterViewModel

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("üîä –ê—É–¥–∏–æ")
                .font(.headline)

            VStack(spacing: 12) {
                // –ö–æ–¥–µ–∫ –∞—É–¥–∏–æ
                SettingRow(label: "–ö–æ–¥–µ–∫") {
                    Picker("", selection: $viewModel.conversionSettings.audioCodec) {
                        ForEach(AudioCodec.allCases, id: \.self) { codec in
                            Text(codec.rawValue).tag(codec)
                        }
                    }
                    .pickerStyle(.segmented)
                    .frame(width: 300)
                }

                // –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                if viewModel.conversionSettings.audioCodec != .copy {
                    SettingRow(label: "–ë–∏—Ç—Ä–µ–π—Ç") {
                        VStack(alignment: .leading, spacing: 4) {
                            Slider(value: Binding(
                                get: { Double(viewModel.conversionSettings.audioBitrate) },
                                set: { viewModel.conversionSettings.audioBitrate = Int($0) }
                            ), in: 64...320, step: 32)
                            .frame(width: 300)

                            HStack {
                                Text("64 kb/s")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Spacer()
                                Text("\(viewModel.conversionSettings.audioBitrate) kb/s")
                                    .font(.callout)
                                    .fontWeight(.medium)
                                Spacer()
                                Text("320 kb/s")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }
                }

                // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                SettingRow(label: "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è") {
                    Toggle("", isOn: .constant(false))
                        .labelsHidden()
                    Text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }

                // –ö–∞–Ω–∞–ª—ã
                SettingRow(label: "–ö–∞–Ω–∞–ª—ã") {
                    Picker("", selection: .constant("–°—Ç–µ—Ä–µ–æ")) {
                        Text("–ú–æ–Ω–æ").tag("–ú–æ–Ω–æ")
                        Text("–°—Ç–µ—Ä–µ–æ").tag("–°—Ç–µ—Ä–µ–æ")
                        Text("5.1").tag("5.1")
                        Text("7.1").tag("7.1")
                    }
                    .frame(width: 150)
                    .disabled(true) // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
                }
            }
        }
    }
}

struct OutputSettingsSection: View {
    @ObservedObject var viewModel: VideoConverterViewModel
    @Binding var isShowingFolderPicker: Bool

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("üìÅ –í—ã—Ö–æ–¥")
                .font(.headline)

            VStack(spacing: 12) {
                // –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
                SettingRow(label: "–§–æ—Ä–º–∞—Ç") {
                    Picker("", selection: $viewModel.conversionSettings.outputFormat) {
                        ForEach(OutputFormat.allCases, id: \.self) { format in
                            Text(format.rawValue).tag(format)
                        }
                    }
                    .pickerStyle(.segmented)
                    .frame(width: 250)
                }

                // –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                SettingRow(label: "–ü–∞–ø–∫–∞") {
                    HStack {
                        Text(viewModel.conversionSettings.outputDirectory?.path ?? "–¢–∞ –∂–µ –ø–∞–ø–∫–∞")
                            .lineLimit(1)
                            .truncationMode(.middle)
                            .frame(maxWidth: 250, alignment: .leading)

                        Button(action: { isShowingFolderPicker = true }) {
                            Image(systemName: "folder")
                        }
                        .buttonStyle(.bordered)

                        if viewModel.conversionSettings.outputDirectory != nil {
                            Button(action: { viewModel.conversionSettings.outputDirectory = nil }) {
                                Image(systemName: "xmark.circle.fill")
                                    .foregroundColor(.secondary)
                            }
                            .buttonStyle(.plain)
                        }
                    }
                }

                // –®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                SettingRow(label: "–ò–º—è —Ñ–∞–π–ª–∞") {
                    TextField("", text: $viewModel.conversionSettings.fileNameTemplate)
                        .textFieldStyle(.roundedBorder)
                        .frame(width: 300)
                }

                VStack(alignment: .leading, spacing: 4) {
                    Text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                        .font(.caption)
                        .foregroundColor(.secondary)

                    Text("{original} - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è, {quality} - –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding(.leading, 120)
            }
        }
    }
}

struct PresetsSection: View {
    @ObservedObject var viewModel: VideoConverterViewModel

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("üíæ –ü—Ä–µ—Å–µ—Ç—ã")
                    .font(.headline)

                Spacer()

                Button(action: { /* Create new preset */ }) {
                    Label("–°–æ–∑–¥–∞—Ç—å", systemImage: "plus")
                }
                .buttonStyle(.bordered)

                Button(action: { /* Save current settings */ }) {
                    Label("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", systemImage: "square.and.arrow.down")
                }
                .buttonStyle(.bordered)
            }

            VStack(spacing: 8) {
                PresetRow(name: "Web (720p)", description: "–î–ª—è –≤–µ–±–∞, MP4, H.264, 720p")
                PresetRow(name: "HD –ö–∞—á–µ—Å—Ç–≤–æ", description: "Full HD, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, MP4")
                PresetRow(name: "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π", description: "–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä, MP4, H.265")
                PresetRow(name: "–ê—É–¥–∏–æ —Ç–æ–ª—å–∫–æ", description: "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ, MP3")
            }
        }
    }
}

struct PresetRow: View {
    let name: String
    let description: String

    var body: some View {
        HStack {
            VStack(alignment: .leading) {
                Text(name)
                    .font(.callout)
                    .fontWeight(.medium)
                Text(description)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }

            Spacer()

            Button(action: { /* Load preset */ }) {
                Text("–ó–∞–≥—Ä—É–∑–∏—Ç—å")
            }
            .buttonStyle(.bordered)
        }
        .padding()
        .background(Color.secondary.opacity(0.05))
        .clipShape(RoundedRectangle(cornerRadius: 8))
    }
}

struct SystemSettingsSection: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞")
                .font(.headline)

            VStack(spacing: 12) {
                SettingRow(label: "–ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á") {
                    Picker("", selection: .constant(2)) {
                        Text("1").tag(1)
                        Text("2").tag(2)
                        Text("4").tag(4)
                        Text("8").tag(8)
                    }
                    .frame(width: 80)
                    .disabled(true) // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
                }

                SettingRow(label: "–£–¥–∞–ª—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã") {
                    Toggle("", isOn: .constant(false))
                        .labelsHidden()
                    Text("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }

                SettingRow(label: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") {
                    Toggle("", isOn: .constant(true))
                        .labelsHidden()
                    Text("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
        }
    }
}

struct SettingRow<Content: View>: View {
    let label: String
    let content: Content

    init(label: String, @ViewBuilder content: () -> Content) {
        self.label = label
        self.content = content()
    }

    var body: some View {
        HStack(alignment: .top) {
            Text(label)
                .frame(width: 120, alignment: .leading)
                .font(.callout)
                .foregroundColor(.secondary)

            content
        }
    }
}

#Preview {
    SettingsView(viewModel: VideoConverterViewModel())
}
